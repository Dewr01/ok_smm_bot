# modules/ai_writer.py
from . import ModuleBase
import os
import uuid
import requests
import urllib3
from dotenv import load_dotenv

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
load_dotenv()


class AIWriterModule(ModuleBase):
    name = "ai_writer"
    title = "AI —Ç–µ–∫—Å—Ç—ã"

    AUTH_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    CHAT_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

    def _get_access_token(self):
        auth_key = os.getenv("GIGACHAT_AUTH_KEY", "").strip()
        if not auth_key:
            raise RuntimeError("–ù–µ—Ç GIGACHAT_AUTH_KEY –≤ .env")

        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
            "RqUID": str(uuid.uuid4()),
            "Authorization": f"Basic {auth_key}",
        }
        data = {"scope": "GIGACHAT_API_PERS"}
        resp = requests.post(self.AUTH_URL, headers=headers, data=data, verify=False, timeout=15)
        resp.raise_for_status()
        return resp.json()["access_token"]

    def _gigachat_text(self, prompt: str) -> str:
        token = self._get_access_token()
        headers = {"Authorization": f"Bearer {token}"}
        payload = {
            "model": "GigaChat",
            "messages": [
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π."
                },
                {"role": "user", "content": prompt},
            ],
            "temperature": 0.7,
            "max_tokens": 700,
        }
        resp = requests.post(self.CHAT_URL, headers=headers, json=payload, verify=False, timeout=30)
        resp.raise_for_status()
        data = resp.json()
        return data["choices"][0]["message"]["content"]

    def generate(self, template: str, topic: str, tone: str = "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π"):
        base = f"–¢–µ–º–∞: {topic}\n–¢–æ–Ω: {tone}\n–®–∞–±–ª–æ–Ω: {template}\n"
        try:
            return self._gigachat_text(base)
        except Exception as e:
            # fallback ‚Äî –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏
            if template == "–°–æ–≤–µ—Ç –¥–Ω—è":
                return base + "–°–æ–≤–µ—Ç –¥–Ω—è: –ø–µ–π—Ç–µ –≤–æ–¥—É üíß"
            if template == "–¢–û–ü-5":
                return base + "–¢–û–ü-5: 1) –í–æ–¥–∞ 2) –°–æ–Ω 3) –î–≤–∏–∂–µ–Ω–∏–µ 4) –°–≤–µ—Ç 5) –†–µ–∂–∏–º"
            if template == "–í–æ–ø—Ä–æ—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º":
                return base + "–í–æ–ø—Ä–æ—Å: –∫–∞–∫ –≤—ã –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ –∫–æ–∂–µ —É—Ç—Ä–æ–º?"
            return base + f"[AI fallback] –û—à–∏–±–∫–∞ GigaChat: {e}"
