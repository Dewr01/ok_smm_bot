import os
import asyncio
import threading
from telegram.ext import Application, CommandHandler

import db
from modules.ok_api import OkApiModule
from seed import run_seed
from seed_ai import main as seed_ai_main
from .autopost import AutoPostModule

from . import ModuleBase
from db import list_queue, publish_post, add_post


class TGAdminModule(ModuleBase):
    name = "tg_admin"

    def __init__(self, services):
        super().__init__(services)
        self.services = services or {}
        self._app = None
        self._thread = None

    def init_app(self, app):
        """–ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç app.py –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—è"""
        self.init()

    def init(self):
        token = os.getenv("TG_BOT_TOKEN")
        if not token:
            print("‚ö†Ô∏è TG_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env ‚Äî Telegram-–±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self._app = Application.builder().token(token).build()

        # === –ö–æ–º–∞–Ω–¥—ã ===
        async def start(update, context):
            await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                                            "/posts - —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤\n"
                                            "/update_posts - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤\n"
                                            "/queue - –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
                                            "/preview <id> - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞\n"
                                            "/publish <id> - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç\n"
                                            "/delete <id> - —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç\n"
                                            "/addpost <—Ç–µ–∫—Å—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç")

        async def queue(update, context):
            posts = list_queue()
            if not posts:
                await update.message.reply_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
            else:
                msg = "\n\n".join([f"{i + 1}. {p['body']}" for i, p in enumerate(posts)])
                await update.message.reply_text("–ß–µ—Ä–Ω–æ–≤–∏–∫–∏:\n" + msg)

        async def posts(update, context):
            try:
                limit = 10
                if context.args:
                    try:
                        limit = min(int(context.args[0]), 50)
                    except Exception:
                        pass

                posts = __import__("db").list_posts(limit=limit)
                if not posts:
                    await update.message.reply_text("üì≠ –ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç.")
                    return

                lines = []
                for p in posts:
                    pid = p.get("id")
                    body = (p.get("text") or "").strip()
                    body_short = body.replace("\n", " ")[:120]  # –ø–µ—Ä–≤—ã–µ 120 —Å–∏–º–≤–æ–ª–æ–≤
                    status = "üïí –≤ –æ—á–µ—Ä–µ–¥–∏"
                    if p.get("published_at"):
                        status = "‚úÖ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"
                    elif p.get("scheduled_at"):
                        status = f"üìÖ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {p['scheduled_at']}"
                    lines.append(f"ID {pid}: {body_short} ({status})")

                msg = "\n\n".join(lines)
                await update.message.reply_text(msg[:4000])  # –ª–∏–º–∏—Ç —Ç–µ–ª–µ–≥–∏
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

        async def update_posts(update, context):
            try:
                run_seed()
                seed_ai_main()
                await update.message.reply_text("‚úÖ –ü–æ—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

        async def publish(update, context):
            if not context.args:
                await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /publish <id>")
                return
            try:
                pid = int(context.args[0])
                posts = __import__("db").list_posts(limit=500)
                post = next((p for p in posts if p["id"] == pid), None)
                if not post:
                    await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç —Å ID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                if post.get("published_at"):
                    await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
                    return

                # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API
                from .ok_client import OkClient  # ‚Üê –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢

                ok_api = OkClient()  # ‚Üê —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞

                text = post.get("text", "")
                image_path = post.get("image_path")

                try:
                    if image_path and os.path.exists(image_path):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ OkClient
                        tokens = ok_api.upload_photos(ok_api.group_id, [image_path])
                        if tokens:
                            result = ok_api.post_with_image(text, tokens[0])
                        else:
                            result = ok_api.post_text(text)
                    else:
                        result = ok_api.post_text(text)

                    db.mark_published(pid)
                    await update.message.reply_text(f"‚úÖ –ü–æ—Å—Ç #{pid} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∞—Ö!")

                except Exception as api_error:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API: {api_error}")

                await update.message.reply_text(f"‚úÖ –ü–æ—Å—Ç {pid} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

        async def add(update, context):
            body = " ".join(context.args)
            if not body:
                await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /addpost <—Ç–µ–∫—Å—Ç>")
                return
            add_post(body)
            await update.message.reply_text("‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")

        async def delete(update, context):
            if not context.args:
                await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /delete <id>")
                return
            try:
                pid = int(context.args[0])
                db = __import__("db")
                posts = db.list_posts(limit=500)
                post = next((p for p in posts if p["id"] == pid), None)
                if not post:
                    await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç —Å ID {pid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                db.delete_post(pid)
                await update.message.reply_text(f"üóë –ü–æ—Å—Ç {pid} —É–¥–∞–ª—ë–Ω.")
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        self._app.add_handler(CommandHandler("start", start))
        self._app.add_handler(CommandHandler("queue", queue))
        self._app.add_handler(CommandHandler("publish", publish))
        self._app.add_handler(CommandHandler("addpost", add))
        self._app.add_handler(CommandHandler("posts", posts))
        self._app.add_handler(CommandHandler("update_posts", update_posts))
        self._app.add_handler(CommandHandler("delete", delete))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º event loop
        def run():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self._app.initialize())
            loop.run_until_complete(self._app.start())
            loop.create_task(self._app.updater.start_polling())
            try:
                loop.run_forever()
            finally:
                loop.run_until_complete(self._app.stop())
                loop.close()

        self._thread = threading.Thread(target=run, daemon=True)
        self._thread.start()


# –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –º–æ–¥—É–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if __name__ == "__main__":
    mod = TGAdminModule({"db": __import__("db")})
    mod.init()
    print("TG Admin Bot –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    try:
        while True:
            pass
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
